Starting... 
2025-07-18 13:49:02.654250: Using splits from existing split file: ../DATASET/DATASET_Lungs/DATASET_Lungs/unetr_pp_raw/unetr_pp_raw_data/Task06_Lung/Task006_Lung/splits_final.pkl 
2025-07-18 13:49:02.655565: The split file contains 5 splits. 
2025-07-18 13:49:02.655798: Desired fold for training: 0 
2025-07-18 13:49:02.656058: This split has 50 training and 13 validation cases. 
2025-07-18 13:49:02.772832: TRAINING KEYS:
 odict_keys(['lung_004', 'lung_005', 'lung_006', 'lung_009', 'lung_010', 'lung_014', 'lung_015', 'lung_016', 'lung_018', 'lung_020', 'lung_022', 'lung_023', 'lung_026', 'lung_028', 'lung_029', 'lung_031', 'lung_033', 'lung_034', 'lung_036', 'lung_037', 'lung_038', 'lung_041', 'lung_042', 'lung_043', 'lung_045', 'lung_047', 'lung_049', 'lung_051', 'lung_053', 'lung_054', 'lung_055', 'lung_057', 'lung_059', 'lung_061', 'lung_064', 'lung_065', 'lung_066', 'lung_069', 'lung_071', 'lung_073', 'lung_074', 'lung_075', 'lung_078', 'lung_079', 'lung_080', 'lung_084', 'lung_086', 'lung_092', 'lung_095', 'lung_096']) 
2025-07-18 13:49:02.773430: VALIDATION KEYS:
 odict_keys(['lung_001', 'lung_003', 'lung_025', 'lung_027', 'lung_044', 'lung_046', 'lung_048', 'lung_058', 'lung_062', 'lung_070', 'lung_081', 'lung_083', 'lung_093']) 
2025-07-18 13:49:11.828679: lr: 0.01 
2025-07-18 13:49:16.130671: Unable to plot network architecture: 
2025-07-18 13:49:16.133811: No module named 'hiddenlayer' 
2025-07-18 13:49:16.134498: 
printing the network instead:
 
2025-07-18 13:49:16.134948: MLRU_PP(
  (unetr_pp_encoder): UnetrPPEncoder(
    (downsample_layers): ModuleList(
      (0): Sequential(
        (0): Convolution(
          (conv): Conv3d(1, 32, kernel_size=(1, 4, 4), stride=(1, 4, 4), bias=False)
        )
        (1): GroupNorm(1, 32, eps=1e-05, affine=True)
      )
      (1): Sequential(
        (0): Convolution(
          (conv): Conv3d(32, 64, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        )
        (1): GroupNorm(32, 64, eps=1e-05, affine=True)
      )
      (2): Sequential(
        (0): Convolution(
          (conv): Conv3d(64, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        )
        (1): GroupNorm(64, 128, eps=1e-05, affine=True)
      )
      (3): Sequential(
        (0): Convolution(
          (conv): Conv3d(128, 256, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        )
        (1): GroupNorm(128, 256, eps=1e-05, affine=True)
      )
    )
    (stages): ModuleList(
      (0): Sequential(
        (0): TransformerBlock(
          (norm): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
          (epa_block): MLCAB(
            (epa): LightCBAM(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (sigmoid): Sigmoid()
              (ca_drop): Dropout(p=0.1, inplace=False)
              (sa_conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (sa_drop): Dropout(p=0.1, inplace=False)
            )
            (mscb): MSCB(
              (pconv1): Sequential(
                (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (msdc): MSDC(
                (dwconvs): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), groups=64, bias=False)
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (1): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (2): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                )
              )
              (pconv2): Sequential(
                (0): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (conv51): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv52): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv8): Sequential(
            (0): Dropout3d(p=0.1, inplace=False)
            (1): Conv3d(32, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          )
        )
        (1): TransformerBlock(
          (norm): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
          (epa_block): MLCAB(
            (epa): LightCBAM(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (sigmoid): Sigmoid()
              (ca_drop): Dropout(p=0.1, inplace=False)
              (sa_conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (sa_drop): Dropout(p=0.1, inplace=False)
            )
            (mscb): MSCB(
              (pconv1): Sequential(
                (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (msdc): MSDC(
                (dwconvs): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), groups=64, bias=False)
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (1): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (2): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                )
              )
              (pconv2): Sequential(
                (0): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (conv51): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv52): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv8): Sequential(
            (0): Dropout3d(p=0.1, inplace=False)
            (1): Conv3d(32, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          )
        )
        (2): TransformerBlock(
          (norm): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
          (epa_block): MLCAB(
            (epa): LightCBAM(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (sigmoid): Sigmoid()
              (ca_drop): Dropout(p=0.1, inplace=False)
              (sa_conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (sa_drop): Dropout(p=0.1, inplace=False)
            )
            (mscb): MSCB(
              (pconv1): Sequential(
                (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (msdc): MSDC(
                (dwconvs): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), groups=64, bias=False)
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (1): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (2): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                )
              )
              (pconv2): Sequential(
                (0): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (conv51): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv52): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv8): Sequential(
            (0): Dropout3d(p=0.1, inplace=False)
            (1): Conv3d(32, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          )
        )
      )
      (1): Sequential(
        (0): TransformerBlock(
          (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (epa_block): MLCAB(
            (epa): LightCBAM(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (sigmoid): Sigmoid()
              (ca_drop): Dropout(p=0.1, inplace=False)
              (sa_conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (sa_drop): Dropout(p=0.1, inplace=False)
            )
            (mscb): MSCB(
              (pconv1): Sequential(
                (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (msdc): MSDC(
                (dwconvs): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), groups=128, bias=False)
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (1): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (2): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False)
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                )
              )
              (pconv2): Sequential(
                (0): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (conv51): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv52): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv8): Sequential(
            (0): Dropout3d(p=0.1, inplace=False)
            (1): Conv3d(64, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          )
        )
        (1): TransformerBlock(
          (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (epa_block): MLCAB(
            (epa): LightCBAM(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (sigmoid): Sigmoid()
              (ca_drop): Dropout(p=0.1, inplace=False)
              (sa_conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (sa_drop): Dropout(p=0.1, inplace=False)
            )
            (mscb): MSCB(
              (pconv1): Sequential(
                (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (msdc): MSDC(
                (dwconvs): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), groups=128, bias=False)
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (1): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (2): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False)
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                )
              )
              (pconv2): Sequential(
                (0): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (conv51): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv52): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv8): Sequential(
            (0): Dropout3d(p=0.1, inplace=False)
            (1): Conv3d(64, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          )
        )
        (2): TransformerBlock(
          (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (epa_block): MLCAB(
            (epa): LightCBAM(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (sigmoid): Sigmoid()
              (ca_drop): Dropout(p=0.1, inplace=False)
              (sa_conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (sa_drop): Dropout(p=0.1, inplace=False)
            )
            (mscb): MSCB(
              (pconv1): Sequential(
                (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (msdc): MSDC(
                (dwconvs): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), groups=128, bias=False)
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (1): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (2): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False)
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                )
              )
              (pconv2): Sequential(
                (0): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (conv51): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv52): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv8): Sequential(
            (0): Dropout3d(p=0.1, inplace=False)
            (1): Conv3d(64, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          )
        )
      )
      (2): Sequential(
        (0): TransformerBlock(
          (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (epa_block): MLCAB(
            (epa): LightCBAM(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (sigmoid): Sigmoid()
              (ca_drop): Dropout(p=0.1, inplace=False)
              (sa_conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (sa_drop): Dropout(p=0.1, inplace=False)
            )
            (mscb): MSCB(
              (pconv1): Sequential(
                (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (msdc): MSDC(
                (dwconvs): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), groups=256, bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (1): Sequential(
                    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (2): Sequential(
                    (0): Conv2d(256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256, bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                )
              )
              (pconv2): Sequential(
                (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (conv51): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv52): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv8): Sequential(
            (0): Dropout3d(p=0.1, inplace=False)
            (1): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          )
        )
        (1): TransformerBlock(
          (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (epa_block): MLCAB(
            (epa): LightCBAM(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (sigmoid): Sigmoid()
              (ca_drop): Dropout(p=0.1, inplace=False)
              (sa_conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (sa_drop): Dropout(p=0.1, inplace=False)
            )
            (mscb): MSCB(
              (pconv1): Sequential(
                (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (msdc): MSDC(
                (dwconvs): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), groups=256, bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (1): Sequential(
                    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (2): Sequential(
                    (0): Conv2d(256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256, bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                )
              )
              (pconv2): Sequential(
                (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (conv51): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv52): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv8): Sequential(
            (0): Dropout3d(p=0.1, inplace=False)
            (1): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          )
        )
        (2): TransformerBlock(
          (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (epa_block): MLCAB(
            (epa): LightCBAM(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (sigmoid): Sigmoid()
              (ca_drop): Dropout(p=0.1, inplace=False)
              (sa_conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (sa_drop): Dropout(p=0.1, inplace=False)
            )
            (mscb): MSCB(
              (pconv1): Sequential(
                (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (msdc): MSDC(
                (dwconvs): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), groups=256, bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (1): Sequential(
                    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (2): Sequential(
                    (0): Conv2d(256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256, bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                )
              )
              (pconv2): Sequential(
                (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (conv51): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv52): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv8): Sequential(
            (0): Dropout3d(p=0.1, inplace=False)
            (1): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          )
        )
      )
      (3): Sequential(
        (0): TransformerBlock(
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (epa_block): MLCAB(
            (epa): LightCBAM(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (sigmoid): Sigmoid()
              (ca_drop): Dropout(p=0.1, inplace=False)
              (sa_conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (sa_drop): Dropout(p=0.1, inplace=False)
            )
            (mscb): MSCB(
              (pconv1): Sequential(
                (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (msdc): MSDC(
                (dwconvs): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), groups=512, bias=False)
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (1): Sequential(
                    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512, bias=False)
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (2): Sequential(
                    (0): Conv2d(512, 512, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=512, bias=False)
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                )
              )
              (pconv2): Sequential(
                (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (conv51): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv52): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv8): Sequential(
            (0): Dropout3d(p=0.1, inplace=False)
            (1): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          )
        )
        (1): TransformerBlock(
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (epa_block): MLCAB(
            (epa): LightCBAM(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (sigmoid): Sigmoid()
              (ca_drop): Dropout(p=0.1, inplace=False)
              (sa_conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (sa_drop): Dropout(p=0.1, inplace=False)
            )
            (mscb): MSCB(
              (pconv1): Sequential(
                (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (msdc): MSDC(
                (dwconvs): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), groups=512, bias=False)
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (1): Sequential(
                    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512, bias=False)
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (2): Sequential(
                    (0): Conv2d(512, 512, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=512, bias=False)
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                )
              )
              (pconv2): Sequential(
                (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (conv51): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv52): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv8): Sequential(
            (0): Dropout3d(p=0.1, inplace=False)
            (1): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          )
        )
        (2): TransformerBlock(
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (epa_block): MLCAB(
            (epa): LightCBAM(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(256, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(16, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (sigmoid): Sigmoid()
              (ca_drop): Dropout(p=0.1, inplace=False)
              (sa_conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (sa_drop): Dropout(p=0.1, inplace=False)
            )
            (mscb): MSCB(
              (pconv1): Sequential(
                (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (msdc): MSDC(
                (dwconvs): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), groups=512, bias=False)
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (1): Sequential(
                    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512, bias=False)
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (2): Sequential(
                    (0): Conv2d(512, 512, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=512, bias=False)
                    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                )
              )
              (pconv2): Sequential(
                (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (conv51): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv52): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv8): Sequential(
            (0): Dropout3d(p=0.1, inplace=False)
            (1): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          )
        )
      )
    )
  )
  (encoder1): UnetResBlock(
    (conv1): Convolution(
      (conv): Conv3d(1, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
    )
    (conv2): Convolution(
      (conv): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
    )
    (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
    (norm1): InstanceNorm3d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (norm2): InstanceNorm3d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (conv3): Convolution(
      (conv): Conv3d(1, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
    )
    (norm3): InstanceNorm3d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
  )
  (decoder5): UnetrUpBlock(
    (transp_conv): Convolution(
      (conv): ConvTranspose3d(256, 128, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    )
    (decoder_block): ModuleList(
      (0): Sequential(
        (0): TransformerBlock(
          (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (epa_block): MLCAB(
            (epa): LightCBAM(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (sigmoid): Sigmoid()
              (ca_drop): Dropout(p=0.1, inplace=False)
              (sa_conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (sa_drop): Dropout(p=0.1, inplace=False)
            )
            (mscb): MSCB(
              (pconv1): Sequential(
                (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (msdc): MSDC(
                (dwconvs): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), groups=256, bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (1): Sequential(
                    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (2): Sequential(
                    (0): Conv2d(256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256, bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                )
              )
              (pconv2): Sequential(
                (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (conv51): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv52): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv8): Sequential(
            (0): Dropout3d(p=0.1, inplace=False)
            (1): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          )
        )
        (1): TransformerBlock(
          (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (epa_block): MLCAB(
            (epa): LightCBAM(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (sigmoid): Sigmoid()
              (ca_drop): Dropout(p=0.1, inplace=False)
              (sa_conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (sa_drop): Dropout(p=0.1, inplace=False)
            )
            (mscb): MSCB(
              (pconv1): Sequential(
                (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (msdc): MSDC(
                (dwconvs): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), groups=256, bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (1): Sequential(
                    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (2): Sequential(
                    (0): Conv2d(256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256, bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                )
              )
              (pconv2): Sequential(
                (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (conv51): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv52): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv8): Sequential(
            (0): Dropout3d(p=0.1, inplace=False)
            (1): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          )
        )
        (2): TransformerBlock(
          (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (epa_block): MLCAB(
            (epa): LightCBAM(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (sigmoid): Sigmoid()
              (ca_drop): Dropout(p=0.1, inplace=False)
              (sa_conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (sa_drop): Dropout(p=0.1, inplace=False)
            )
            (mscb): MSCB(
              (pconv1): Sequential(
                (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (msdc): MSDC(
                (dwconvs): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), groups=256, bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (1): Sequential(
                    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (2): Sequential(
                    (0): Conv2d(256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256, bias=False)
                    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                )
              )
              (pconv2): Sequential(
                (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (conv51): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv52): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv8): Sequential(
            (0): Dropout3d(p=0.1, inplace=False)
            (1): Conv3d(128, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          )
        )
      )
    )
  )
  (decoder4): UnetrUpBlock(
    (transp_conv): Convolution(
      (conv): ConvTranspose3d(128, 64, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    )
    (decoder_block): ModuleList(
      (0): Sequential(
        (0): TransformerBlock(
          (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (epa_block): MLCAB(
            (epa): LightCBAM(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (sigmoid): Sigmoid()
              (ca_drop): Dropout(p=0.1, inplace=False)
              (sa_conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (sa_drop): Dropout(p=0.1, inplace=False)
            )
            (mscb): MSCB(
              (pconv1): Sequential(
                (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (msdc): MSDC(
                (dwconvs): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), groups=128, bias=False)
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (1): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (2): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False)
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                )
              )
              (pconv2): Sequential(
                (0): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (conv51): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv52): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv8): Sequential(
            (0): Dropout3d(p=0.1, inplace=False)
            (1): Conv3d(64, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          )
        )
        (1): TransformerBlock(
          (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (epa_block): MLCAB(
            (epa): LightCBAM(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (sigmoid): Sigmoid()
              (ca_drop): Dropout(p=0.1, inplace=False)
              (sa_conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (sa_drop): Dropout(p=0.1, inplace=False)
            )
            (mscb): MSCB(
              (pconv1): Sequential(
                (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (msdc): MSDC(
                (dwconvs): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), groups=128, bias=False)
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (1): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (2): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False)
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                )
              )
              (pconv2): Sequential(
                (0): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (conv51): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv52): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv8): Sequential(
            (0): Dropout3d(p=0.1, inplace=False)
            (1): Conv3d(64, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          )
        )
        (2): TransformerBlock(
          (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (epa_block): MLCAB(
            (epa): LightCBAM(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (sigmoid): Sigmoid()
              (ca_drop): Dropout(p=0.1, inplace=False)
              (sa_conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (sa_drop): Dropout(p=0.1, inplace=False)
            )
            (mscb): MSCB(
              (pconv1): Sequential(
                (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (msdc): MSDC(
                (dwconvs): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), groups=128, bias=False)
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (1): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (2): Sequential(
                    (0): Conv2d(128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False)
                    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                )
              )
              (pconv2): Sequential(
                (0): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (conv51): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv52): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv8): Sequential(
            (0): Dropout3d(p=0.1, inplace=False)
            (1): Conv3d(64, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          )
        )
      )
    )
  )
  (decoder3): UnetrUpBlock(
    (transp_conv): Convolution(
      (conv): ConvTranspose3d(64, 32, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
    )
    (decoder_block): ModuleList(
      (0): Sequential(
        (0): TransformerBlock(
          (norm): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
          (epa_block): MLCAB(
            (epa): LightCBAM(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (sigmoid): Sigmoid()
              (ca_drop): Dropout(p=0.1, inplace=False)
              (sa_conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (sa_drop): Dropout(p=0.1, inplace=False)
            )
            (mscb): MSCB(
              (pconv1): Sequential(
                (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (msdc): MSDC(
                (dwconvs): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), groups=64, bias=False)
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (1): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (2): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                )
              )
              (pconv2): Sequential(
                (0): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (conv51): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv52): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv8): Sequential(
            (0): Dropout3d(p=0.1, inplace=False)
            (1): Conv3d(32, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          )
        )
        (1): TransformerBlock(
          (norm): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
          (epa_block): MLCAB(
            (epa): LightCBAM(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (sigmoid): Sigmoid()
              (ca_drop): Dropout(p=0.1, inplace=False)
              (sa_conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (sa_drop): Dropout(p=0.1, inplace=False)
            )
            (mscb): MSCB(
              (pconv1): Sequential(
                (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (msdc): MSDC(
                (dwconvs): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), groups=64, bias=False)
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (1): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (2): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                )
              )
              (pconv2): Sequential(
                (0): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (conv51): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv52): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv8): Sequential(
            (0): Dropout3d(p=0.1, inplace=False)
            (1): Conv3d(32, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          )
        )
        (2): TransformerBlock(
          (norm): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
          (epa_block): MLCAB(
            (epa): LightCBAM(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc1): Conv2d(32, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (relu): ReLU(inplace=True)
              (fc2): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (sigmoid): Sigmoid()
              (ca_drop): Dropout(p=0.1, inplace=False)
              (sa_conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (sa_drop): Dropout(p=0.1, inplace=False)
            )
            (mscb): MSCB(
              (pconv1): Sequential(
                (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU6(inplace=True)
              )
              (msdc): MSDC(
                (dwconvs): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), groups=64, bias=False)
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (1): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                  (2): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU6(inplace=True)
                  )
                )
              )
              (pconv2): Sequential(
                (0): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (conv51): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv52): UnetResBlock(
            (conv1): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (conv2): Convolution(
              (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
            )
            (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
            (norm1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (norm2): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (conv8): Sequential(
            (0): Dropout3d(p=0.1, inplace=False)
            (1): Conv3d(32, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          )
        )
      )
    )
  )
  (decoder2): UnetrUpBlock(
    (transp_conv): Convolution(
      (conv): ConvTranspose3d(32, 16, kernel_size=(1, 4, 4), stride=(1, 4, 4), bias=False)
    )
    (decoder_block): ModuleList(
      (0): UnetResBlock(
        (conv1): Convolution(
          (conv): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
        )
        (lrelu): LeakyReLU(negative_slope=0.01, inplace=True)
        (norm1): InstanceNorm3d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (norm2): InstanceNorm3d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      )
    )
  )
  (out1): UnetOutBlock(
    (conv): Convolution(
      (conv): Conv3d(16, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1))
    )
  )
  (out2): UnetOutBlock(
    (conv): Convolution(
      (conv): Conv3d(32, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1))
    )
  )
  (out3): UnetOutBlock(
    (conv): Convolution(
      (conv): Conv3d(64, 2, kernel_size=(1, 1, 1), stride=(1, 1, 1))
    )
  )
) 
2025-07-18 13:49:16.164722: 
 
2025-07-18 13:49:16.165593: 
epoch:  0 
